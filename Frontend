// FILE: App.jsx
import React, { useState, useEffect } from "react";
import { BrowserRouter, Routes, Route, Link, useNavigate, useLocation } from "react-router-dom";
import { jsPDF } from "jspdf";
import { QrReader } from "react-qr-reader";
import QRCode from "qrcode.react";

/* -------------------- LocalStorage Utility (Simulated Blockchain) -------------------- */
const KEY = "edutrust_demo_certificates";
function readAll() {
  const raw = localStorage.getItem(KEY);
  return raw ? JSON.parse(raw) : [];
}
function save(cert) {
  const arr = readAll();
  arr.push(cert);
  localStorage.setItem(KEY, JSON.stringify(arr));
}
function update(hash, patch) {
  const arr = readAll().map((c) => (c.hash === hash ? { ...c, ...patch } : c));
  localStorage.setItem(KEY, JSON.stringify(arr));
}
function findByStudent(name) {
  const arr = readAll();
  return arr.find((c) => c.student.toLowerCase() === name.toLowerCase());
}

/* -------------------- App Wrapper -------------------- */
export default function App() {
  return (
    <BrowserRouter>
      <div className="container">
        <div className="header">
          <h2>EduTrust â€” Demo DApp</h2>
          <nav className="nav">
            <Link to="/">Home</Link>
            <Link to="/authority-login">Authority Login</Link>
            <Link to="/company-login">Company Login</Link>
            <Link to="/scan">Scanner</Link>
          </nav>
        </div>

        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/authority-login" element={<AuthorityLogin />} />
          <Route path="/company-login" element={<CompanyLogin />} />
          <Route path="/authority" element={<AuthorityDashboard />} />
          <Route path="/company" element={<CompanyDashboard />} />
          <Route path="/scan" element={<Scanner />} />
          <Route path="/verify" element={<PublicVerify />} />
        </Routes>
      </div>
    </BrowserRouter>
  );
}

/* -------------------- Home Page -------------------- */
function Home() {
  return (
    <div>
      <h3>Welcome to EduTrust Demo</h3>
      <p>
        This demo shows core flows: Educational Authority login, certificate upload, company verification, and QR scanner module. It uses
        localStorage to simulate blockchain storage. Replace with Ethereum + IPFS in production.
      </p>
    </div>
  );
}

/* -------------------- Educational Authority Login -------------------- */
function AuthorityLogin() {
  const [addr, setAddr] = useState("");
  const nav = useNavigate();

  function login(e) {
    e.preventDefault();
    if (!addr) return alert("Enter authority address (demo)");
    localStorage.setItem("edutrust_authority", addr);
    nav("/authority");
  }

  return (
    <div>
      <h3>Educational Authority Login (Demo)</h3>
      <form onSubmit={login}>
        <div className="form-row">
          <input className="input" placeholder="Authority Address or Email (demo)" value={addr} onChange={(e) => setAddr(e.target.value)} />
        </div>
        <button className="button">Login</button>
      </form>
    </div>
  );
}

/* -------------------- Authority Dashboard -------------------- */
function AuthorityDashboard() {
  const [certs, setCerts] = useState([]);
  const [form, setForm] = useState({ student: "", course: "", year: "2025", grade: "A" });

  useEffect(() => {
    setCerts(readAll());
  }, []);

  function handleChange(e) {
    setForm({ ...form, [e.target.name]: e.target.value });
  }

  async function issue(e) {
    e.preventDefault();
    const hash = "hash_" + Math.random().toString(36).slice(2, 10);
    const cert = {
      hash,
      student: form.student,
      course: form.course,
      year: form.year,
      grade: form.grade,
      issuer: localStorage.getItem("edutrust_authority") || "demo-authority",
      issuedAt: new Date().toISOString(),
      revoked: false,
    };

    const verifyUrl = `${window.location.origin}/verify?hash=${hash}`;
    cert.verifyUrl = verifyUrl;

    // Generate PDF with embedded QR
    const pdf = new jsPDF();
    pdf.setFontSize(18);
    pdf.text("Certificate", 20, 30);
    pdf.setFontSize(12);
    pdf.text(`Student: ${cert.student}`, 20, 50);
    pdf.text(`Course: ${cert.course}`, 20, 60);
    pdf.text(`Grade: ${cert.grade}`, 20, 70);
    pdf.text(`Issuer: ${cert.issuer}`, 20, 80);
    pdf.text(`Verify at: ${verifyUrl}`, 20, 100);
    pdf.save(`${cert.student}_certificate.pdf`);

    save(cert);
    setCerts((prev) => [...prev, cert]);
    alert("Certificate issued (demo). Hash: " + hash);
  }

  function revokeCertificate(h) {
    update(h, { revoked: true });
    setCerts(readAll());
  }

  return (
    <div>
      <h3>Authority Dashboard</h3>
      <div className="card" style={{ marginBottom: 12 }}>
        <h4>Issue Certificate</h4>
        <form onSubmit={issue}>
          <div className="form-row">
            <input name="student" className="input" placeholder="Student Name" value={form.student} onChange={handleChange} required />
          </div>
          <div className="form-row">
            <input name="course" className="input" placeholder="Course" value={form.course} onChange={handleChange} required />
          </div>
          <div className="form-row">
            <input name="grade" className="input" placeholder="Grade" value={form.grade} onChange={handleChange} required />
          </div>
          <div className="form-row">
            <input name="year" className="input" placeholder="Year" value={form.year} onChange={handleChange} required />
          </div>
          <button className="button">Issue Certificate</button>
        </form>
      </div>

      <div>
        <h4>Issued Certificates</h4>
        <table className="table">
          <thead>
            <tr>
              <th>Hash</th>
              <th>Student</th>
              <th>Course</th>
              <th>Issued At</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {certs.map((c) => (
              <tr key={c.hash}>
                <td style={{ fontFamily: "monospace" }}>{c.hash}</td>
                <td>{c.student}</td>
                <td>{c.course}</td>
                <td>{new Date(c.issuedAt).toLocaleString()}</td>
                <td>
                  {!c.revoked && (
                    <button className="button" onClick={() => revokeCertificate(c.hash)}>
                      Revoke
                    </button>
                  )}
                  {c.revoked && <span style={{ color: "red" }}>Revoked</span>}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

/* -------------------- Company Login -------------------- */
function CompanyLogin() {
  const [company, setCompany] = useState("");
  const nav = useNavigate();

  function login(e) {
    e.preventDefault();
    if (!company) return alert("Enter company name (demo)");
    localStorage.setItem("edutrust_company", company);
    nav("/company");
  }

  return (
    <div>
      <h3>Company Login (Demo)</h3>
      <form onSubmit={login}>
        <div className="form-row">
          <input className="input" placeholder="Company Name" value={company} onChange={(e) => setCompany(e.target.value)} />
        </div>
        <button className="button">Login</button>
      </form>
    </div>
  );
}

/* -------------------- Updated Company Dashboard (Search by Student Name) -------------------- */
function CompanyDashboard() {
  const [student, setStudent] = useState("");
  const [result, setResult] = useState(null);

  function verify(e) {
    e.preventDefault();
    const res = findByStudent(student);
    if (!res) return setResult({ found: false });
    setResult({ ...res, found: true });
  }

  return (
    <div>
      <h3>Company Dashboard - Verify Certificate</h3>
      <form onSubmit={verify} style={{ marginBottom: 12 }}>
        <input className="input" placeholder="Enter Student Name" value={student} onChange={(e) => setStudent(e.target.value)} />
        <div style={{ marginTop: 8 }}>
          <button className="button">Search Certificate</button>
        </div>
      </form>

      {result && !result.found && <div className="card">No certificate found for this student.</div>}

      {result && result.found && (
        <div className="card">
          <h4>Certificate Details</h4>
          <p>
            <strong>Student:</strong> {result.student}
          </p>
          <p>
            <strong>Course:</strong> {result.course}
          </p>
          <p>
            <strong>Issuer:</strong> {result.issuer}
          </p>
          <p>
            <strong>Issued At:</strong> {new Date(result.issuedAt).toLocaleString()}
          </p>
          <p>
            <strong>Status:</strong> {result.revoked ? "Revoked" : "Valid"}
          </p>
          <div style={{ marginTop: 10 }}>
            <p>
              <strong>QR Code:</strong>
            </p>
            <QRCode value={result.verifyUrl} size={120} />
          </div>
        </div>
      )}
    </div>
  );
}

/* -------------------- Scanner -------------------- */
function Scanner() {
  const [data, setData] = useState("No result");
  const nav = useNavigate();

  return (
    <div>
      <h3>Scanner Module</h3>
      <div style={{ maxWidth: 480 }}>
        <QrReader
          constraints={{ facingMode: "environment" }}
          onResult={(result) => {
            if (result) {
              setData(result.text);
              try {
                const u = new URL(result.text);
                const h = u.searchParams.get("hash");
                if (h) nav(`/verify?hash=${h}`);
              } catch (e) {}
            }
          }}
          style={{ width: "100%" }}
        />
      </div>
      <p>Result: {data}</p>
    </div>
  );
}

/* -------------------- Public Verify Page -------------------- */
function useQuery() {
  return new URLSearchParams(useLocation().search);
}

function PublicVerify() {
  const q = useQuery();
  const hashParam = q.get("hash");
  const [result, setResult] = useState(null);

  useEffect(() => {
    if (hashParam) {
      const arr = readAll();
      const r = arr.find((c) => c.hash === hashParam);
      setResult(r || { notFound: true });
    }
  }, [hashParam]);

  if (!hashParam) return <div>Please provide a certificate hash in query like ?hash=...</div>;
  if (result && result.notFound) return <div className="card">Certificate not found or invalid.</div>;
  if (!result) return <div>Loading...</div>;

  return (
    <div className="card">
      <h4>Certificate Verification</h4>
      <p>
        <strong>Student:</strong> {result.student}
      </p>
      <p>
        <strong>Course:</strong> {result.course}
      </p>
      <p>
        <strong>Issuer:</strong> {result.issuer}
      </p>
      <p>
        <strong>Issued At:</strong> {new Date(result.issuedAt).toLocaleString()}
      </p>
      <p>
        <strong>Status:</strong> {result.revoked ? "Revoked" : "Valid"}
      </p>
    </div>
  );
}

/* -------------------- Inline Styles -------------------- */
const style = document.createElement("style");
style.innerHTML = `
body { font-family: Inter, system-ui, Arial; margin:0; padding:0; background:#f5f7fb; color:#111827 }
.container { max-width:1000px; margin:32px auto; padding:20px; background:white; border-radius:8px; box-shadow:0 6px 18px rgba(15,23,42,0.08) }
.header { display:flex; justify-content:space-between; align-items:center; margin-bottom:20px }
.nav a { margin-right:12px; color:#2563eb; text-decoration:none }
.form-row { margin-bottom:12px }
.input { padding:8px 10px; border:1px solid #d1d5db; border-radius:6px; width:100% }
.button { padding:8px 14px; background:#2563eb; color:#fff; border:none; border-radius:6px; cursor:pointer }
.table { width:100%; border-collapse:collapse }
.table th, .table td { text-align:left; padding:8px; border-bottom:1px solid #e5e7eb }
.card { padding:12px; border:1px solid #e6ecf2; border-radius:8px; margin-top:8px }
`;
document.head.appendChild(style);
